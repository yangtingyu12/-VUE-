{"ast":null,"code":"import \"vant/es/icon/style\";\nimport _Icon from \"vant/es/icon\";\n// 获取歌曲详情和 歌曲的歌词接口\nimport { getSongByIdAPI, getLyricByIdAPI } from '@/api';\nexport default {\n  components: {\n    [_Icon.name]: _Icon\n  },\n  name: 'play',\n\n  data() {\n    return {\n      playState: false,\n      // 音乐播放状态(true暂停, false播放)\n      id: this.$route.query.id,\n      // 上一页传过来的音乐id\n      songInfo: {},\n      // 歌曲信息\n      lyric: {},\n      // 歌词枚举对象(需要在js拿到歌词写代码处理后, 按照格式保存到这个对象)\n      curLyric: '',\n      // 当前显示哪句歌词\n      lastLy: '' // 记录当前播放歌词\n\n    };\n  },\n\n  computed: {\n    needleDeg() {\n      // 留声机-唱臂的位置属性\n      return this.playState ? '-7deg' : '-38deg';\n    }\n\n  },\n  methods: {\n    async getSong() {\n      // 获取歌曲详情, 和歌词方法\n      const res = await getSongByIdAPI(this.id);\n      this.songInfo = res.data.songs[0]; // 获取-并调用_formatLyr方法, 处理歌词\n\n      const lyrContent = await getLyricByIdAPI(this.id);\n      const lyricStr = lyrContent.data.lrc.lyric;\n      this.lyric = this._formatLyr(lyricStr); // 初始化完毕先显示零秒歌词\n\n      this.curLyric = this.lyric[0];\n    },\n\n    _formatLyr(lyricStr) {\n      // 可以看network观察歌词数据是一个大字符串, 进行拆分.\n      let reg = /\\[.+?\\]/g; // \n\n      let timeArr = lyricStr.match(reg); // 匹配所有[]字符串以及里面的一切内容, 返回数组\n\n      console.log(timeArr); // [\"[00:00.000]\", \"[00:01.000]\", ......]\n\n      let contentArr = lyricStr.split(/\\[.+?\\]/).slice(1); // 按照[]拆分歌词字符串, 返回一个数组(下标为0位置元素不要,后面的留下所以截取)\n\n      console.log(contentArr);\n      let lyricObj = {}; // 保存歌词的对象, key是秒, value是显示的歌词\n\n      timeArr.forEach((item, index) => {\n        // 拆分[00:00.000]这个格式字符串, 把分钟数字取出, 转换成秒\n        let ms = item.split(':')[0].split('')[2] * 60; // 拆分[00:00.000]这个格式字符串, 把十位的秒拿出来, 如果是0, 去拿下一位数字, 否则直接用2位的值\n\n        let ss = item.split(':')[1].split('.')[0].split('')[0] === '0' ? item.split(':')[1].split('.')[0].split('')[1] : item.split(':')[1].split('.')[0]; // 秒数作为key, 对应歌词作为value\n\n        lyricObj[ms + Number(ss)] = contentArr[index];\n      }); // 返回得到的歌词对象(可以打印看看)\n\n      console.log(lyricObj);\n      return lyricObj;\n    },\n\n    audioStart() {\n      // 播放按钮 - 点击事件\n      if (!this.playState) {\n        // 如果状态为false\n        this.$refs.audio.play(); // 调用audio标签的内置方法play可以继续播放声音\n      } else {\n        this.$refs.audio.pause(); // 暂停audio的播放\n      }\n\n      this.playState = !this.playState; // 点击设置对立状态\n    },\n\n    showLyric() {\n      // 监听播放audio进度, 切换歌词显示\n      this.$refs.audio.addEventListener('timeupdate', () => {\n        let curTime = Math.floor(this.$refs.audio.currentTime); // 避免空白出现\n\n        if (this.lyric[curTime]) {\n          this.curLyric = this.lyric[curTime];\n          this.lastLy = this.curLyric;\n        } else {\n          this.curLyric = this.lastLy;\n        }\n      });\n    }\n\n  },\n\n  mounted() {\n    this.getSong();\n    this.showLyric();\n    console.log(this.$route.query.id);\n  }\n\n};","map":{"version":3,"mappings":";;AAuEA;AACA;AAEA;EACAA;IACA;EADA,CADA;EAIAC,YAJA;;EAKAC;IACA;MACAC,gBADA;MACA;MACAC,wBAFA;MAEA;MACAC,YAHA;MAGA;MACAC,SAJA;MAIA;MACAC,YALA;MAKA;MACAC,UANA,CAMA;;IANA;EAQA,CAdA;;EAeAC;IACAC;MAAA;MACA;IACA;;EAHA,CAfA;EAoBAC;IACA;MAAA;MACA;MACA,kCAFA,CAGA;;MACA;MACA;MACA,uCANA,CAOA;;MACA;IACA,CAVA;;IAWAC;MACA;MACA,qBAFA,CAEA;;MACA,kCAHA,CAGA;;MACAC,qBAJA,CAIA;;MACA,oDALA,CAKA;;MACAA;MACA,kBAPA,CAOA;;MACAC;QACA;QACA,8CAFA,CAGA;;QACA,kJAJA,CAKA;;QACAC;MACA,CAPA,EARA,CAgBA;;MACAF;MACA;IACA,CA9BA;;IA+BAG;MAAA;MACA;QAAA;QACA,wBADA,CACA;MACA,CAFA,MAEA;QACA,yBADA,CACA;MACA;;MACA,iCANA,CAMA;IACA,CAtCA;;IAuCAC;MACA;MACA;QACA,uDADA,CAEA;;QACA;UACA;UACA;QACA,CAHA,MAGA;UACA;QACA;MACA,CATA;IAUA;;EAnDA,CApBA;;EAyEAC;IACA;IACA;IACAL;EACA;;AA7EA","names":["components","name","data","playState","id","songInfo","lyric","curLyric","lastLy","computed","needleDeg","methods","_formatLyr","console","timeArr","lyricObj","audioStart","showLyric","mounted"],"sourceRoot":"src/views/Play","sources":["index.vue"],"sourcesContent":["<template>\r\n  <div class=\"play\">\r\n    <!-- 模糊背景(靠样式设置), 固定定位 -->\r\n    <div\r\n      class=\"song-bg\"\r\n      :style=\"`background-image: url(${\r\n        songInfo && songInfo.al && songInfo.al.picUrl\r\n      }?imageView&thumbnail=360y360&quality=75&tostatic=0);`\"\r\n    ></div>\r\n    <!-- 播放页头部导航 -->\r\n    <div class=\"header\">\r\n      <van-icon\r\n        name=\"arrow-left\"\r\n        size=\"20\"\r\n        class=\"left-incon\"\r\n        @click=\"$router.back()\"\r\n      />\r\n    </div>\r\n    <!-- 留声机 - 容器 -->\r\n    <div class=\"song-wrapper\">\r\n      <!-- 留声机本身(靠css动画做旋转) -->\r\n      <div\r\n        class=\"song-turn ani\"\r\n        :style=\"`animation-play-state:${playState ? 'running' : 'paused'}`\"\r\n      >\r\n        <div class=\"song-img\">\r\n          <!-- &&写法是为了防止报错, 有字段再继续往下访问属性 -->\r\n          <img\r\n            style=\"width: 100%\"\r\n            :src=\"`${\r\n              songInfo && songInfo.al && songInfo.al.picUrl\r\n            }?imageView&thumbnail=360y360&quality=75&tostatic=0`\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <!-- 播放按钮 -->\r\n      <div class=\"start-box\" @click=\"audioStart\">\r\n        <span class=\"song-start\" v-show=\"!playState\"></span>\r\n      </div>\r\n      <!-- 播放歌词容器 -->\r\n      <div class=\"song-msg\">\r\n        <!-- 歌曲名 -->\r\n        <h2 class=\"m-song-h2\">\r\n          <span class=\"m-song-sname\"\r\n            >{{ songInfo.name }}-{{\r\n              songInfo && songInfo.ar && songInfo.ar[0].name\r\n            }}</span\r\n          >\r\n        </h2>\r\n        <!-- 歌词部分-随着时间切换展示一句歌词 -->\r\n        <div class=\"lrcContent\">\r\n          <p class=\"lrc\">{{ curLyric }}</p>\r\n        </div>\r\n      </div>\r\n      <!-- 留声机 - 唱臂 -->\r\n      <div class=\"needle\" :style=\"`transform: rotate(${needleDeg});`\"></div>\r\n    </div>\r\n    <!-- 播放音乐真正的标签\r\n      看接口文档: 音乐地址需要带id去获取(但是有的歌曲可能404)\r\n      https://binaryify.github.io/NeteaseCloudMusicApi/#/?id=%e8%8e%b7%e5%8f%96%e9%9f%b3%e4%b9%90-url\r\n     -->\r\n    <audio\r\n      ref=\"audio\"\r\n      preload=\"true\"\r\n      :src=\"`https://music.163.com/song/media/outer/url?id=${id}.mp3`\"\r\n    ></audio>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 获取歌曲详情和 歌曲的歌词接口\r\nimport { getSongByIdAPI, getLyricByIdAPI } from '@/api'\r\nimport { Icon } from 'vant'\r\nexport default {\r\n  components: {\r\n    [Icon.name]: Icon,\r\n  },\r\n  name: 'play',\r\n  data() {\r\n    return {\r\n      playState: false, // 音乐播放状态(true暂停, false播放)\r\n      id: this.$route.query.id, // 上一页传过来的音乐id\r\n      songInfo: {}, // 歌曲信息\r\n      lyric: {}, // 歌词枚举对象(需要在js拿到歌词写代码处理后, 按照格式保存到这个对象)\r\n      curLyric: '', // 当前显示哪句歌词\r\n      lastLy: '' // 记录当前播放歌词\r\n    }\r\n  },\r\n  computed: {\r\n    needleDeg() { // 留声机-唱臂的位置属性\r\n      return this.playState ? '-7deg' : '-38deg'\r\n    }\r\n  },\r\n  methods: {\r\n    async getSong() { // 获取歌曲详情, 和歌词方法\r\n      const res = await getSongByIdAPI(this.id)\r\n      this.songInfo = res.data.songs[0]\r\n      // 获取-并调用_formatLyr方法, 处理歌词\r\n      const lyrContent = await getLyricByIdAPI(this.id)\r\n      const lyricStr = lyrContent.data.lrc.lyric\r\n      this.lyric = this._formatLyr(lyricStr)\r\n      // 初始化完毕先显示零秒歌词\r\n      this.curLyric = this.lyric[0]\r\n    },\r\n    _formatLyr(lyricStr) {\r\n      // 可以看network观察歌词数据是一个大字符串, 进行拆分.\r\n      let reg = /\\[.+?\\]/g // \r\n      let timeArr = lyricStr.match(reg) // 匹配所有[]字符串以及里面的一切内容, 返回数组\r\n      console.log(timeArr); // [\"[00:00.000]\", \"[00:01.000]\", ......]\r\n      let contentArr = lyricStr.split(/\\[.+?\\]/).slice(1) // 按照[]拆分歌词字符串, 返回一个数组(下标为0位置元素不要,后面的留下所以截取)\r\n      console.log(contentArr);\r\n      let lyricObj = {} // 保存歌词的对象, key是秒, value是显示的歌词\r\n      timeArr.forEach((item, index) => {\r\n        // 拆分[00:00.000]这个格式字符串, 把分钟数字取出, 转换成秒\r\n        let ms = item.split(':')[0].split('')[2] * 60\r\n        // 拆分[00:00.000]这个格式字符串, 把十位的秒拿出来, 如果是0, 去拿下一位数字, 否则直接用2位的值\r\n        let ss = item.split(':')[1].split('.')[0].split('')[0] === '0' ? item.split(':')[1].split('.')[0].split('')[1] : item.split(':')[1].split('.')[0]\r\n        // 秒数作为key, 对应歌词作为value\r\n        lyricObj[ms + Number(ss)] = contentArr[index]\r\n      })\r\n      // 返回得到的歌词对象(可以打印看看)\r\n      console.log(lyricObj);\r\n      return lyricObj\r\n    },\r\n    audioStart() { // 播放按钮 - 点击事件\r\n      if (!this.playState) { // 如果状态为false\r\n        this.$refs.audio.play() // 调用audio标签的内置方法play可以继续播放声音\r\n      } else {\r\n        this.$refs.audio.pause() // 暂停audio的播放\r\n      }\r\n      this.playState = !this.playState // 点击设置对立状态\r\n    },\r\n    showLyric() {\r\n      // 监听播放audio进度, 切换歌词显示\r\n      this.$refs.audio.addEventListener('timeupdate', () => {\r\n        let curTime = Math.floor(this.$refs.audio.currentTime)\r\n        // 避免空白出现\r\n        if (this.lyric[curTime]) {\r\n          this.curLyric = this.lyric[curTime]\r\n          this.lastLy = this.curLyric\r\n        } else {\r\n          this.curLyric = this.lastLy\r\n        }\r\n      })\r\n    }\r\n  },\r\n  mounted() {\r\n    this.getSong()\r\n    this.showLyric()\r\n    console.log(this.$route.query.id);\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.header {\r\n  height: 50px;\r\n}\r\n.play {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  z-index: 1000;\r\n}\r\n.song-bg {\r\n  background-color: #161824;\r\n  background-position: 50%;\r\n  background-repeat: no-repeat;\r\n  background-size: auto 100%;\r\n  transform: scale(1.5);\r\n  transform-origin: center;\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  z-index: 1;\r\n  opacity: 1;\r\n  filter: blur(25px); /*模糊背景 */\r\n}\r\n.song-bg::before{ /*纯白色的图片做背景, 歌词白色看不到了, 在背景前加入一个黑色半透明蒙层解决 */\r\n  content: \" \";\r\n  background: rgba(0, 0, 0, 0.5);\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n  bottom:0;\r\n}\r\n.song-wrapper {\r\n  position: fixed;\r\n  width: 247px;\r\n  height: 247px;\r\n  left: 50%;\r\n  top: 50px;\r\n  transform: translateX(-50%);\r\n  z-index: 10001;\r\n}\r\n.song-turn {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: url(\"./img/bg.png\") no-repeat;\r\n  background-size: 100%;\r\n}\r\n.start-box {\r\n  position: absolute;\r\n  width: 156px;\r\n  height: 156px;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.song-start {\r\n  width: 56px;\r\n  height: 56px;\r\n  background: url(\"./img/start.png\");\r\n  background-size: 100%;\r\n}\r\n.needle {\r\n  position: absolute;\r\n  transform-origin: left top;\r\n  background: url(\"./img/needle-ab.png\") no-repeat;\r\n  background-size: contain;\r\n  width: 73px;\r\n  height: 118px;\r\n  top: -40px;\r\n  left: 112px;\r\n  transition: all 0.6s;\r\n}\r\n.song-img {\r\n  width: 154px;\r\n  height: 154px;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  overflow: hidden;\r\n  border-radius: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n.m-song-h2 {\r\n  margin-top: 20px;\r\n  text-align: center;\r\n  font-size: 18px;\r\n  color: #fefefe;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n}\r\n.lrcContent {\r\n  margin-top: 50px;\r\n}\r\n.lrc {\r\n  font-size: 14px;\r\n  color: #fff;\r\n  text-align: center;\r\n}\r\n.left-incon {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  font-size: 24px;\r\n  z-index: 10001;\r\n  color: #fff;\r\n}\r\n.ani {\r\n  animation: turn 5s linear infinite;\r\n}\r\n@keyframes turn {\r\n  0% {\r\n    -webkit-transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n  }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}